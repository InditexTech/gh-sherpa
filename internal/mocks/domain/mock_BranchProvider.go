// Code generated by mockery v2.32.4. DO NOT EDIT.

package domain

import (
	domain "github.com/InditexTech/gh-sherpa/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockBranchProvider is an autogenerated mock type for the BranchProvider type
type MockBranchProvider struct {
	mock.Mock
}

type MockBranchProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBranchProvider) EXPECT() *MockBranchProvider_Expecter {
	return &MockBranchProvider_Expecter{mock: &_m.Mock}
}

// GetBranchName provides a mock function with given fields: issueTracker, issueIdentifier, repo
func (_m *MockBranchProvider) GetBranchName(issueTracker domain.IssueTracker, issueIdentifier string, repo domain.Repository) (string, error) {
	ret := _m.Called(issueTracker, issueIdentifier, repo)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.IssueTracker, string, domain.Repository) (string, error)); ok {
		return rf(issueTracker, issueIdentifier, repo)
	}
	if rf, ok := ret.Get(0).(func(domain.IssueTracker, string, domain.Repository) string); ok {
		r0 = rf(issueTracker, issueIdentifier, repo)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.IssueTracker, string, domain.Repository) error); ok {
		r1 = rf(issueTracker, issueIdentifier, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBranchProvider_GetBranchName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBranchName'
type MockBranchProvider_GetBranchName_Call struct {
	*mock.Call
}

// GetBranchName is a helper method to define mock.On call
//   - issueTracker domain.IssueTracker
//   - issueIdentifier string
//   - repo domain.Repository
func (_e *MockBranchProvider_Expecter) GetBranchName(issueTracker interface{}, issueIdentifier interface{}, repo interface{}) *MockBranchProvider_GetBranchName_Call {
	return &MockBranchProvider_GetBranchName_Call{Call: _e.mock.On("GetBranchName", issueTracker, issueIdentifier, repo)}
}

func (_c *MockBranchProvider_GetBranchName_Call) Run(run func(issueTracker domain.IssueTracker, issueIdentifier string, repo domain.Repository)) *MockBranchProvider_GetBranchName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.IssueTracker), args[1].(string), args[2].(domain.Repository))
	})
	return _c
}

func (_c *MockBranchProvider_GetBranchName_Call) Return(branchName string, err error) *MockBranchProvider_GetBranchName_Call {
	_c.Call.Return(branchName, err)
	return _c
}

func (_c *MockBranchProvider_GetBranchName_Call) RunAndReturn(run func(domain.IssueTracker, string, domain.Repository) (string, error)) *MockBranchProvider_GetBranchName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBranchProvider creates a new instance of MockBranchProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBranchProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBranchProvider {
	mock := &MockBranchProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

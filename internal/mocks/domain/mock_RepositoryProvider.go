// Code generated by mockery v2.32.4. DO NOT EDIT.

package domain

import (
	domain "github.com/InditexTech/gh-sherpa/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockRepositoryProvider is an autogenerated mock type for the RepositoryProvider type
type MockRepositoryProvider struct {
	mock.Mock
}

type MockRepositoryProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryProvider) EXPECT() *MockRepositoryProvider_Expecter {
	return &MockRepositoryProvider_Expecter{mock: &_m.Mock}
}

// GetRepository provides a mock function with given fields:
func (_m *MockRepositoryProvider) GetRepository() (*domain.Repository, error) {
	ret := _m.Called()

	var r0 *domain.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func() (*domain.Repository, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *domain.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryProvider_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type MockRepositoryProvider_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
func (_e *MockRepositoryProvider_Expecter) GetRepository() *MockRepositoryProvider_GetRepository_Call {
	return &MockRepositoryProvider_GetRepository_Call{Call: _e.mock.On("GetRepository")}
}

func (_c *MockRepositoryProvider_GetRepository_Call) Run(run func()) *MockRepositoryProvider_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepositoryProvider_GetRepository_Call) Return(repo *domain.Repository, err error) *MockRepositoryProvider_GetRepository_Call {
	_c.Call.Return(repo, err)
	return _c
}

func (_c *MockRepositoryProvider_GetRepository_Call) RunAndReturn(run func() (*domain.Repository, error)) *MockRepositoryProvider_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryProvider creates a new instance of MockRepositoryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryProvider {
	mock := &MockRepositoryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

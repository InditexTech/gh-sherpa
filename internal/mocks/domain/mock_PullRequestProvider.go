// Code generated by mockery v2.32.4. DO NOT EDIT.

package domain

import (
	domain "github.com/InditexTech/gh-sherpa/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockPullRequestProvider is an autogenerated mock type for the PullRequestProvider type
type MockPullRequestProvider struct {
	mock.Mock
}

type MockPullRequestProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPullRequestProvider) EXPECT() *MockPullRequestProvider_Expecter {
	return &MockPullRequestProvider_Expecter{mock: &_m.Mock}
}

// CreatePullRequest provides a mock function with given fields: title, body, baseBranch, headBranch, draft
func (_m *MockPullRequestProvider) CreatePullRequest(title string, body string, baseBranch string, headBranch string, draft bool) (string, error) {
	ret := _m.Called(title, body, baseBranch, headBranch, draft)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, bool) (string, error)); ok {
		return rf(title, body, baseBranch, headBranch, draft)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, bool) string); ok {
		r0 = rf(title, body, baseBranch, headBranch, draft)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, bool) error); ok {
		r1 = rf(title, body, baseBranch, headBranch, draft)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPullRequestProvider_CreatePullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequest'
type MockPullRequestProvider_CreatePullRequest_Call struct {
	*mock.Call
}

// CreatePullRequest is a helper method to define mock.On call
//   - title string
//   - body string
//   - baseBranch string
//   - headBranch string
//   - draft bool
func (_e *MockPullRequestProvider_Expecter) CreatePullRequest(title interface{}, body interface{}, baseBranch interface{}, headBranch interface{}, draft interface{}) *MockPullRequestProvider_CreatePullRequest_Call {
	return &MockPullRequestProvider_CreatePullRequest_Call{Call: _e.mock.On("CreatePullRequest", title, body, baseBranch, headBranch, draft)}
}

func (_c *MockPullRequestProvider_CreatePullRequest_Call) Run(run func(title string, body string, baseBranch string, headBranch string, draft bool)) *MockPullRequestProvider_CreatePullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *MockPullRequestProvider_CreatePullRequest_Call) Return(prUrl string, err error) *MockPullRequestProvider_CreatePullRequest_Call {
	_c.Call.Return(prUrl, err)
	return _c
}

func (_c *MockPullRequestProvider_CreatePullRequest_Call) RunAndReturn(run func(string, string, string, string, bool) (string, error)) *MockPullRequestProvider_CreatePullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequestForBranch provides a mock function with given fields: _a0
func (_m *MockPullRequestProvider) GetPullRequestForBranch(_a0 string) (*domain.PullRequest, error) {
	ret := _m.Called(_a0)

	var r0 *domain.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.PullRequest, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.PullRequest); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPullRequestProvider_GetPullRequestForBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequestForBranch'
type MockPullRequestProvider_GetPullRequestForBranch_Call struct {
	*mock.Call
}

// GetPullRequestForBranch is a helper method to define mock.On call
//   - _a0 string
func (_e *MockPullRequestProvider_Expecter) GetPullRequestForBranch(_a0 interface{}) *MockPullRequestProvider_GetPullRequestForBranch_Call {
	return &MockPullRequestProvider_GetPullRequestForBranch_Call{Call: _e.mock.On("GetPullRequestForBranch", _a0)}
}

func (_c *MockPullRequestProvider_GetPullRequestForBranch_Call) Run(run func(_a0 string)) *MockPullRequestProvider_GetPullRequestForBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPullRequestProvider_GetPullRequestForBranch_Call) Return(pullRequest *domain.PullRequest, err error) *MockPullRequestProvider_GetPullRequestForBranch_Call {
	_c.Call.Return(pullRequest, err)
	return _c
}

func (_c *MockPullRequestProvider_GetPullRequestForBranch_Call) RunAndReturn(run func(string) (*domain.PullRequest, error)) *MockPullRequestProvider_GetPullRequestForBranch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPullRequestProvider creates a new instance of MockPullRequestProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPullRequestProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPullRequestProvider {
	mock := &MockPullRequestProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

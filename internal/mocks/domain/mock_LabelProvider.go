// Code generated by mockery v2.32.4. DO NOT EDIT.

package domain

import (
	domain "github.com/InditexTech/gh-sherpa/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockLabelProvider is an autogenerated mock type for the LabelProvider type
type MockLabelProvider struct {
	mock.Mock
}

type MockLabelProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLabelProvider) EXPECT() *MockLabelProvider_Expecter {
	return &MockLabelProvider_Expecter{mock: &_m.Mock}
}

// GetIssueTypeLabel provides a mock function with given fields: issue
func (_m *MockLabelProvider) GetIssueTypeLabel(issue domain.Issue) (string, error) {
	ret := _m.Called(issue)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Issue) (string, error)); ok {
		return rf(issue)
	}
	if rf, ok := ret.Get(0).(func(domain.Issue) string); ok {
		r0 = rf(issue)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.Issue) error); ok {
		r1 = rf(issue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLabelProvider_GetIssueTypeLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueTypeLabel'
type MockLabelProvider_GetIssueTypeLabel_Call struct {
	*mock.Call
}

// GetIssueTypeLabel is a helper method to define mock.On call
//   - issue domain.Issue
func (_e *MockLabelProvider_Expecter) GetIssueTypeLabel(issue interface{}) *MockLabelProvider_GetIssueTypeLabel_Call {
	return &MockLabelProvider_GetIssueTypeLabel_Call{Call: _e.mock.On("GetIssueTypeLabel", issue)}
}

func (_c *MockLabelProvider_GetIssueTypeLabel_Call) Run(run func(issue domain.Issue)) *MockLabelProvider_GetIssueTypeLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Issue))
	})
	return _c
}

func (_c *MockLabelProvider_GetIssueTypeLabel_Call) Return(label string, err error) *MockLabelProvider_GetIssueTypeLabel_Call {
	_c.Call.Return(label, err)
	return _c
}

func (_c *MockLabelProvider_GetIssueTypeLabel_Call) RunAndReturn(run func(domain.Issue) (string, error)) *MockLabelProvider_GetIssueTypeLabel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLabelProvider creates a new instance of MockLabelProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLabelProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLabelProvider {
	mock := &MockLabelProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

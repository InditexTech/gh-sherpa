// SPDX-FileCopyrightText: 2023 INDITEX S.A
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.32.4. DO NOT EDIT.

package domain

import (
	domain "github.com/InditexTech/gh-sherpa/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigProvider is an autogenerated mock type for the ConfigProvider type
type MockConfigProvider struct {
	mock.Mock
}

type MockConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigProvider) EXPECT() *MockConfigProvider_Expecter {
	return &MockConfigProvider_Expecter{mock: &_m.Mock}
}

// GetConfigByIssueTracker provides a mock function with given fields: issueTracker
func (_m *MockConfigProvider) GetConfigByIssueTracker(issueTracker string) (domain.IssueTrackerConfig, error) {
	ret := _m.Called(issueTracker)

	var r0 domain.IssueTrackerConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.IssueTrackerConfig, error)); ok {
		return rf(issueTracker)
	}
	if rf, ok := ret.Get(0).(func(string) domain.IssueTrackerConfig); ok {
		r0 = rf(issueTracker)
	} else {
		r0 = ret.Get(0).(domain.IssueTrackerConfig)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(issueTracker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigProvider_GetConfigByIssueTracker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigByIssueTracker'
type MockConfigProvider_GetConfigByIssueTracker_Call struct {
	*mock.Call
}

// GetConfigByIssueTracker is a helper method to define mock.On call
//   - issueTracker string
func (_e *MockConfigProvider_Expecter) GetConfigByIssueTracker(issueTracker interface{}) *MockConfigProvider_GetConfigByIssueTracker_Call {
	return &MockConfigProvider_GetConfigByIssueTracker_Call{Call: _e.mock.On("GetConfigByIssueTracker", issueTracker)}
}

func (_c *MockConfigProvider_GetConfigByIssueTracker_Call) Run(run func(issueTracker string)) *MockConfigProvider_GetConfigByIssueTracker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigProvider_GetConfigByIssueTracker_Call) Return(_a0 domain.IssueTrackerConfig, _a1 error) *MockConfigProvider_GetConfigByIssueTracker_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigProvider_GetConfigByIssueTracker_Call) RunAndReturn(run func(string) (domain.IssueTrackerConfig, error)) *MockConfigProvider_GetConfigByIssueTracker_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigFilePath provides a mock function with given fields:
func (_m *MockConfigProvider) GetConfigFilePath() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConfigProvider_GetConfigFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigFilePath'
type MockConfigProvider_GetConfigFilePath_Call struct {
	*mock.Call
}

// GetConfigFilePath is a helper method to define mock.On call
func (_e *MockConfigProvider_Expecter) GetConfigFilePath() *MockConfigProvider_GetConfigFilePath_Call {
	return &MockConfigProvider_GetConfigFilePath_Call{Call: _e.mock.On("GetConfigFilePath")}
}

func (_c *MockConfigProvider_GetConfigFilePath_Call) Run(run func()) *MockConfigProvider_GetConfigFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigProvider_GetConfigFilePath_Call) Return(_a0 string) *MockConfigProvider_GetConfigFilePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigProvider_GetConfigFilePath_Call) RunAndReturn(run func() string) *MockConfigProvider_GetConfigFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// SaveConfigByIssueTracker provides a mock function with given fields: issueTracker, config
func (_m *MockConfigProvider) SaveConfigByIssueTracker(issueTracker string, config domain.IssueTrackerConfig) error {
	ret := _m.Called(issueTracker, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.IssueTrackerConfig) error); ok {
		r0 = rf(issueTracker, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigProvider_SaveConfigByIssueTracker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveConfigByIssueTracker'
type MockConfigProvider_SaveConfigByIssueTracker_Call struct {
	*mock.Call
}

// SaveConfigByIssueTracker is a helper method to define mock.On call
//   - issueTracker string
//   - config domain.IssueTrackerConfig
func (_e *MockConfigProvider_Expecter) SaveConfigByIssueTracker(issueTracker interface{}, config interface{}) *MockConfigProvider_SaveConfigByIssueTracker_Call {
	return &MockConfigProvider_SaveConfigByIssueTracker_Call{Call: _e.mock.On("SaveConfigByIssueTracker", issueTracker, config)}
}

func (_c *MockConfigProvider_SaveConfigByIssueTracker_Call) Run(run func(issueTracker string, config domain.IssueTrackerConfig)) *MockConfigProvider_SaveConfigByIssueTracker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(domain.IssueTrackerConfig))
	})
	return _c
}

func (_c *MockConfigProvider_SaveConfigByIssueTracker_Call) Return(_a0 error) *MockConfigProvider_SaveConfigByIssueTracker_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigProvider_SaveConfigByIssueTracker_Call) RunAndReturn(run func(string, domain.IssueTrackerConfig) error) *MockConfigProvider_SaveConfigByIssueTracker_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigProvider creates a new instance of MockConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigProvider {
	mock := &MockConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
